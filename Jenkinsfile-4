pipeline {
    agent any

    environment{
        APP_NAME="my_project/petclinic"
        REPO="reg.home.local"
        RELEASE="1.0.0"
        IMAGE_NAME="${REPO}/${APP_NAME}"
        IMAGE_TAG="${RELEASE}-${BUILD_NUMBER}"
    }
    
    stages {
        stage('Clean WS') {
            steps {
                cleanWs()
            }
        }

        stage('pull scm'){
            steps{
                script {
                    git branch: 'main', 
                    credentialsId: 'github-cred', 
                    url: 'https://github.com/vladoz77/spring-petclinic'
                }
            }
        }

        stage("Build") {
            agent {
                docker {
                reuseNode true
                image 'maven:3.9.0-eclipse-temurin-17'
                args '-v $HOME/.m2:/root/.m2:z -u root'
                }
            }
            steps {
                sh 'mvn  package  -Dcheckstyle.skip'
            }
        }

        stage('maven test') {
            agent {
                docker {
                reuseNode true
                image 'maven:3.9.0-eclipse-temurin-17'
                args '-v $HOME/.m2:/root/.m2:z -u root'
                }
            }
            steps {
                sh "mvn test -Dcheckstyle.skip"
            }
        }

        stage('sonarqube analyses') {
            steps {
                script{
                    withSonarQubeEnv(credentialsId: 'sonarqube-token') {
                        sh "mvn sonar:sonar"
                    }
                }
            }
        }

        stage('Quality gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-token'
                }
            }         
        }

        stage('build image') {
            steps {
                script{
                    customImage=docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                    
                }
            }
        }

        stage('push image to registrie'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'harbor', url: 'https://reg.home.local') {
                        customImage.push("${IMAGE_TAG}")
                        customImage.push('latest')
                    }
                }
                
            }
        }

        stage('cleanup image'){
            steps{
                script{
                    sh "docker image rm ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
    
    }

    post {
        always  {
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts 'target/*.jar,result.txt'
        }
    }
}