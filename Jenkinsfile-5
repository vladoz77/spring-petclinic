pipeline {
    agent any
    tools{
        jdk "jdk17"
        maven "maven3"
    }

    environment{
        // APP_NAME="petclinic"
        // DOCKER_REPO="vladoz77"
        RELEASE="1.0.0"
        IMAGE_NAME="vladoz77/petclinic"
        IMAGE_TAG="${RELEASE}-${BUILD_NUMBER}"
    }
    
    stages {
        stage('Copy SCM') {
            steps {
                git branch: 'main', credentialsId: 'github-token', url: 'https://github.com/vladoz77/spring-petclinic'
            }
        }

        stage('test java') {
            steps {
                sh 'echo $JAVA_HOME'
                sh 'java -version'
                sh 'javac -version'
            }
        }
        

        stage('maven build') {
           
            steps {
                sh "mvn  package -Dcheckstyle.skip -DskipTests"
            }
        }

        stage('run test') {
            parallel {
                stage('maven test') {
                    steps {
                        sh "mvn test -Dcheckstyle.skip"
                    }
                }

                stage('sonarqube analyses') {
                    steps {
                        script{
                            withSonarQubeEnv(credentialsId: 'sonarqube_token') {
                                sh '''
                                    mvn sonar:sonar \
                                    -Dmaven.wagon.http.ssl.insecure=true \
                                    -Dmaven.wagon.http.ssl.allowall=true \
                                    -Dmaven.wagon.http.authentication.preemptive=true
                                '''
                            }
                        }
                    }
                }

            }
        }

        stage('Quality gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonarqube_token'
                }
            }         
        }

        stage('build image') {
            steps {
                script{
                    customImage=docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                    
                }
            }
        } 
        
        
        
        stage('Trivy scan') {
            steps {
                script {
                    sh 'trivy image -o ${WORKSPACE}/result.txt ${IMAGE_NAME}:${IMAGE_TAG}'
                }
            }
        }

        // stage('push image to dockerhub'){
        //     steps{
        //         script{
        //             withDockerRegistry(credentialsId: 'dockerhub-token') {
        //                 customImage.push("${IMAGE_TAG}")
        //                 customImage.push('latest')
        //             }
        //         }
                
        //     }
        // }

        // stage('cleanup image'){
        //     steps{
        //         script{
        //             sh "docker image rm ${IMAGE_NAME}:${IMAGE_TAG}"
        //         }
        //     }
        // }
        
    }
    post {
        always  {
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts 'target/*.jar,result.txt'
        }

        // success {
        //     script {
        //         sh "curl --location --request POST 'https://api.telegram.org/bot${TOKEN}/sendMessage' --form text='${SUCCESS_BUILD}' --form chat_id='${CHAT_ID}'"
        //     }
        // }

        // failure {
        //     script {
        //         sh "curl --location --request POST 'https://api.telegram.org/bot${TOKEN}/sendMessage' --form text='${FAILED_BUILD}' --form chat_id='${CHAT_ID}'"
        //     }
        // }
    }
}

