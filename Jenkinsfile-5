pipeline {
    agent any
    tools{
        maven "maven3"
    }

    environment{
        // APP_NAME="petclinic"
        DOCKER_REPO="registry.home-local.site"
        RELEASE="1.0.0"
        IMAGE_NAME="petclinic"
        IMAGE_TAG="${RELEASE}-${BUILD_NUMBER}"
    }
    
    stages {
        stage('Copy SCM') {
            steps {
                git branch: 'main', credentialsId: 'github-token', url: 'https://github.com/vladoz77/spring-petclinic'
            }
        }


        stage('maven build') {
            agent {
                docker {
                reuseNode true
                image 'maven:3.9.0-eclipse-temurin-17'
                args '-v $HOME/.m2:/root/.m2:z -u root'
                }
            }
            steps {
                sh "mvn  package -Dcheckstyle.skip -DskipTests"
            }
        }

        stage('run test') {
            steps {
                sh "mvn test -Dcheckstyle.skip"
            }
           
        }

        stage('sonarqube analyses') {
            steps {
                script{
                    withSonarQubeEnv(credentialsId: 'sonarqube-token') {
                        sh '''
                            mvn sonar:sonar -Dsonar.qualitygate.wait=true
                        '''
                    }
                }
            }
        }

        stage('Quality gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonarqube-token'
                }
            }         
        }

        stage('build image') {
            steps {
                script{
                    customImage=docker.build("${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        } 
        
        
        
        stage('Trivy scan') {
            steps {
                agent {
                    docker {
                        reuseNode true
                        image 'aquasec/trivy'
                        args '-v $HOME/.m2:/root/.m2:z -u root'
                    }
                }
                script {
                    sh 'trivy image -o ${WORKSPACE}/result.txt ${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}'
                }
            }
        }

        stage('push image to dockerhub'){
            steps{
                script{
                    withDockerRegistry(credentialsId: "nexus-token", url: "https://${DOCKER_REPO}") {
                        customImage.push("${IMAGE_TAG}")
                        customImage.push('latest')
                    }
                }
                
            }
        }

        
    }
    post {
        always  {
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts 'target/*.jar,result.txt'
        }

    }
}

